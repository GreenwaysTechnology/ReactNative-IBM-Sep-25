		 React/React.js
.....................................................................................

What is react?
 A JavaScript library for building user interfaces.

User interfaces:

1.Desktop
2.Browser based web 
3.mobile app

React was created for building web based interface, later react started in mobile development

React - browser
React Native - mobile

....................................................................................
			DOM,VDOM
.....................................................................................

What is DOM?
   DOM is specification  released by W3c organization order to build web apps for browsers.

in order to understand DOM fully , we need to understand HTML very deeply.

HTML:

1.HTML IS PL? - YES
2.HTML Is compiled -YES
3.HTML is excuted-YES

Hello.java --->compile--->Hello.class--->run----JVM(Runtime) executes code.

index.html -source code

<html>
<head></head>
<title><title>
<body>
  <div>
     <h1>Welcome</h1>
  </div>
</body>
</html>
-------------------Browser
loader---LOAD Code into browser
 |
  from file: or http:
|
Parser :
   Parser is special compiler which converts source code into lexical tree(string tree)
|
body
  div
     h1
        Welcome 
     h1
  div
body
|
|
Complier-Compilation : Convert this into assembly
|
body -load xxx
  div
     h1
        Welcome 
     h1
  div
body

.....................................................................................
				Runtime 
.....................................................................................
HTML Execution engine : Request Os ,to allocate memory :Runtime


-LinkedList - c language

body -Node
  div -Node
     h1 -Node
        Welcome -Node
     h1
  div
body
|
 Linking the Nodes: Tree
body  -Node
  |
  div -Node
    |
     h1 -Node
      |
        Welcome -Node
        |
     h1
  div
|
 Layout/Paint Engine: will convert nodes into pxs : final output
....................................................................................
..............................................................................................
Static web pages: HTMLs are displayed into browser.
..............................................................................................
In 1996,Netscap communication, Started an RND project called "How to manipulate the tree"

Tree is written in c language, then we need another c program to communicate.

But NETSCAP decided not to use C pl.

Netscap wanted to put java like implementation inside browser to manipulate "Tree".

that is birth of javascript.

How to access nodes from javascript engine?
  
One spec was published ,As per that spec
 "Document Object Model"
    -How to represent document(elements/nodes) in object oriented way.->DOM

 "Documents can be represented as Objects" : Object oriented Document Programming.

............................................................................................

How dom works?

index.html           Browser runtime(C program)         Javascript Engine
<h1>Hello</h1>       h1-Node                           h1- Object
			Hello-Node			 Hello Object Property



                 Every Html ELEMENT Inside Browser is "C Program"

	       Every Html ELEMENT Inside JavaScript engine is "Object"


javascript developer ---->uses api --->to communicate Object---->js engine---->browser engine.	*************************************************************************************
Who and when "H1" object is created?

if you want to create object?

 class/ function

function Employee(){}  let emp = new Employee()


<h1> => function HTMLHeadingElement(){} => let h =new HTMLHeadingElement() ?

Note: For html elements, we cant create object directly, rather than JS Engine will create objects , return references to the developer to access.
 How via factory Objects: object helps to get other documents


Factory Object : HTML Document =>body

document.getElementById();
   |
Implicit object reference variable which points HTMLDocument OBject.
...................................................................................
What is our objective here? DOM Programming?
Enter into DOM programming:

1.write dom programming using javascript language.

<body>
  |
HTMLDocument : body : factory Object


Document apis:

Finding HTML Elements

HTMLElement document.getElementById(id)
      Find an element by element id
HTMLElement Document document.getElementsByTagName(name)
	Find elements by tag name
HTMLElement document.getElementsByClassName(name)
	Find elements by class name

HTMLElement document.querySelectory(selector) 
      find element/elements by selector


Changing HTML Elements : update existing element
......................
element.innerHTML =  new html content	Change the inner HTML of an element
element.attribute = new value	Change the attribute value of an HTML element
element.style.property = new style	Change the style of an HTML element
Method	Description
element.setAttribute(attribute, value)	Change the attribute value of an HTML element

Adding and Deleting Elements
document.createElement(element)	Create an HTML element
document.removeChild(element)	Remove an HTML element
document.appendChild(element)	Add an HTML element
document.replaceChild(new, old)	Replace an HTML element

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
									   React as Dom lib
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

React project setup:
.................................

in order to create project or mange project, build project, deploy project -  you need build tools

In java we use maven or Gradle.

In JavaScript we use node based build tool called "npm or npx". This tool is available only along with node.
if you want to use npm or npx you must have installed node.js

React teams offers tool set to create react project.

create-react-app:
 This old tool to create react application, almost this tool has been moved into maintenance .

vite:
 Now a days vite based tools are becoming very popular.

npm:
 node package manager

npm create vite@latest my-app

Need to install the following packages:
create-vite@6.5.0
Ok to proceed? (y) y


> npx
> create-vite

|
o  Project name:
|  myreactapp
|
o  Select a framework:
|  React
|
o  Select a variant:
|  JavaScript
|
o  Scaffolding project in G:\IBM\2025\May\ReactNative\myreactapp...
|
â€”  Done. Now run:

  cd myreactapp
  npm install
  npm run dev

...................................................................................
			Exploring Project Structure
...................................................................................

package.json
{
  "name": "myreact-app",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.13.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.3",
    "eslint": "^9.13.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.11.0",
    "vite": "^5.4.10"
  }
}
index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

src/main.jsx : root File
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
..........................................................................................................................................................................
...................................................................................
			   DOM programming using plain js
...................................................................................
function createNode() {
    const Heading = document.createElement('h1')
    Heading.innerHTML = 'Hello React!'
    console.dir(Heading)
    //get the element where you want to insert
    const rootElement = document.getElementById('root')
    rootElement.appendChild(Heading)
}
createNode()
.....................................................................................
			DOM Programming using React.js
.....................................................................................

// import ReactDOM from 'react-dom/client'
import { createRoot } from "react-dom/client"

//declare DOM 
const Heading = <h1>Hello React! How are you?</h1>

// const rootElement = document.getElementById('root')
// ReactDOM.createRoot(rootElement).render(Heading)

// ReactDOM.createRoot(document.getElementById('root')).render(Heading)
createRoot(document.getElementById('root')).render(Heading)

.......................................................................................................................................................................................................................................
					JSX - java script and XML - language to create User interfaces
......................................................................................................................................................................................................................................

React uses declarative Dom programing using a mini language invented by Facebook : JSX

JSX : - JavaScript xml

 1.PL language built by face book to write user interfaces.
 2.JSX is collection of html markup and JavaScript.
 3.JSX is DSL and declarative.
 4.Every device has its own JSX language syntax.
 5.Browsers JSX can't be used for building mobile application.


Since JSX  is a language cant be executed on browser /mobile directly.
..................................................................................
JSX compilation model:

                   layout.js / layout.jsx
		       |
		    compiler - babel.js 
			|
		    plain js code
			|-----------------------Dev cycle
	----------------------------------------- -- Execution cycles Starts
  Runtime : React Engine  compiled code feed into react engine
			|
		     Execute compiled js code : function calls
			|
	     create virtual Object tree (in browser V-dom)
		        |
		     Render Engine ; will convert react object tree into js dom object tree
			|
		   Flush the tree into target
			|
	--------------------------------------------
        |      |
     Browser  Mobile

Since jsx  is a language cant be executed on browser /mobile directly.

JSX is used to create dom elements.

Every DOM element is object.

.........................................................................................................................................................................................................................................
				Component
.................................................................................

What is Component ?
  Component is Object , Coined by MS in 1989.

According to ms, Component is object which has state(data),behavior(methods) + User interface(Visual).
 eg:Button,TextBox,Grid,Menu,MenuBar,Layout,Table.....

Component === Widget ==== Object ==== DOM

Like Object tree(DOM Tree), In React we can create "Component" Tree.


      Node===DOM Object====Component
       h1   --->  HTML Heading--->   Heading

"React apps are made out of components. A Component is piece of the UI that has its own logic and appearance, A Component can be small as a button or as large as an entire Page"

.....................................................................................

In coding 

There two libs 
1.react.js  => to create component and manages all features related component.
2.react-dom => Render engine.

react.js

1.React
  It top level class which provides all apis to create,delete,update components.

react-dom.js

2.ReactDOM

   It is top level class which provides api to flush the v.dom into real dom.

........................................................................................................................................................................................................................................
								Component Creational patterns
.........................................................................................................................................................................................................................................


1.variable pattern
2.functional pattern
3.es 6 class pattern

     					Components can be created any one or mixed way  style.
   					"functional Pattern" is more popular and recommended pattern....



1.variable pattern
import { createRoot } from "react-dom/client"

//variable pattern 
//Here Heading is just variable , referencing the Component
//<h1>xxx</h1> -  Component
const Heading = <h1>Hello React! How are you?</h1>

createRoot(document.getElementById('root')).render(Heading)


2.functional pattern

 2.1.normal function - es 5 function
 2.1.arrow function -  es 6 function 

es 5 function:
import { createRoot } from "react-dom/client"

//functions 
function Heading() {
    return <h1>Hello, React!</h1>
}

createRoot(document.getElementById('root')).render(Heading())

render(Heading()) -  here we invoke function which is not recommended 

render(<Heading></Heading>) - here we use like html tag 
render(<Heading/>) - here we use like html tag -self closing

import { createRoot } from "react-dom/client"

//functions 
function Heading() {
    return <h1>Hello, React!</h1>
}

// createRoot(document.getElementById('root')).render(Heading())
// createRoot(document.getElementById('root')).render(<Heading></Heading>)

createRoot(document.getElementById('root')).render(<Heading/>)


2.1.arrow function -  es 6 function 
import { createRoot } from "react-dom/client"

//arrow
// const Heading = () => {
//     return <h1>Hello, React!</h1>
// }
const Heading = () => <h1>Hello, React!</h1>

createRoot(document.getElementById('root')).render(<Heading />)
.....................................................................................
			 ES6 Classes
.....................................................................................
The latest react echo system, does not recommend to go with class patterns.

import React from "react"
import { createRoot } from "react-dom/client"

class Heading extends React.Component {

    render() {
        return <h1>Hello React!!</h1>
    }
}


createRoot(document.getElementById('root')).render(<Heading />)

....................................................................................
							Exploring JSX
.....................................................................................

JS-JavaScript
X -  XML

	Since HTML parser is weak, but when y write react code, we need consistent code generation.

So that react team, developed compiler follows basic xml rules.

Basic XML  rules:

1.every opened element must be closed
  <h1>Hello</h1>
  <Welcome></Welcome>
 some elements may not have closing tag
  <img /> : image element has no child elements : self closing. 

import { createRoot } from "react-dom/client"

const Heading = ()=>{
    return <h1>Hello
}


createRoot(document.getElementById('root')).render(<Heading />)

[plugin:vite:react-babel] G:\IBM\2024\Nov\ReactiveNative-B1\myreact-app\src\main.jsx: Unterminated JSX contents. (8:62)

   6 |
   7 |
>  8 | createRoot(document.getElementById('root')).render(<Heading />)


2. In xml you must have one single root element.
  all elements must be organized under single root element.

   <h1>Welcome to IBM</h1>
   <p>Hello</p>

In html what can be root element
 <div>,<span>,all html 5 layout elements header,footer,section,aside...

import { createRoot } from "react-dom/client"

const Heading = ()=>{
    return <h1>Hello</h1>
           <p>This is element</p>
}


createRoot(document.getElementById('root')).render(<Heading />)

Solution:
import { createRoot } from "react-dom/client"

const Heading = () => {
    return <div><h1>Hello</h1>
        <p>This is element</p>
    </div>
}


createRoot(document.getElementById('root')).render(<Heading />)


3.Self closing:
import { createRoot } from "react-dom/client"
import logo from './assets/react.svg';

const Heading = () => {
    return <div>
        <img src={logo} />
    </div>
}


createRoot(document.getElementById('root')).render(<Heading />)

4.Component Name must be Pascal Case
  It has to start with capital letter
  It should be Noun

import { createRoot } from "react-dom/client"
import logo from './assets/react.svg';

const heading = () => {
    return <div>
        <img src={logo} />
    </div>
}


createRoot(document.getElementById('root')).render(<heading />)


hook.js:608 Warning: The tag <heading> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter
..........................................................................................................................................................................................................................................
			  				  Fragments
....................................................................................................................

There might be use case where i don't want root element, but without root element compiler gives error.
Can we skip the root element without compile time error.

 Yes

Fragments:
  
   Fragments are invisible root element , just only compilation purpose


Syntax:

 1.<React.Fragment>
 </React.Fragement>
2.<Fragment>
 </Fragement>
3.<>
 </>
import ReactDOM from 'react-dom/client';
// import React, { Fragment } from 'react';

// const Welcome = () => {
//     return <React.Fragment>
//         <h1>Site Heading</h1>
//         <p>This is react</p>
//     </React.Fragment>
// }

// const Welcome = () => {
//     return <Fragment>
//         <h1>Site Heading</h1>
//         <p>This is react</p>
//     </Fragment>
// }

const Welcome = () => {
    return <>
        <h1>Site Heading</h1>
        <p>This is react</p>
    </>
}

const root = ReactDOM.createRoot(document.getElementById('root'));

root.render(<Welcome />)
........................................................................................................................................................................................................................
								 Data binding
.................................................................................

Create  new project:

>npm create vite@latest data-binding

As of now we have seen only how to create static UI - (only HTML)

How to represent data?
->primitives - string,numbers,boolean
->objects - object,arrays

How to bind data?
  {variable} {expression}
 
  {a} {fun()} {10*2} {isHidden ? 'Show':'Hide'} 


Simple Databinding:

const User = () => {
    //variables
    const id = 1
    const userName = 'Subramanian Murugan'
    const email = 'sasubramanian_m@hotmail.com'
    const address = {
        city: 'Coimbatore'
    }
    const status = true

    return <div>
        <h1>User info</h1>
        <h3>Id : {id}</h3>
        <h3>Name : {userName}</h3>
        <h4>Email : {email}</h4>
        <h4>City : {address.city}</h4>
        <h4>Status : {status ? "Available" : "Not Available"}</h4>
    </div>

}
export { User }

If you look at the code above, data is declared within component is tightly coupled.

When you think about component you have to about reusability.

What if i want to show different user information? How to create component in reusable manner?

     ->Properties
..............................................................................................
			Data binding patterns

1.props pattern /property pattern
2.state pattern

How to create reusable component?

 Component must be parametrized or configurable....

You know very well component is function, just js function, when you think about function, you can pass parameter....


Use case: invoke function and pass data
........................................

src/User.jsx

const User = (id,userName,email,address,status) => {
    return <div>
        <h1>User info</h1>
        <h3>Id : {id}</h3>
        <h3>Name : {userName}</h3>
        <h4>Email : {email}</h4>
        <h4>City : {address.city}</h4>
        <h4>Status : {status ? "Available" : "Not Available"}</h4>
    </div>
}
export { User }

src/App.jsx
import { User } from "./users/User";

function App() {
    return <>
        {User(1, 'Subramanian Murugan', 'subu@gmail.com', { city: 'Coimbatore' }, true)}
    </>
}

export default App;
.................................................................................
			Passing props and receiving props with declarative pattern
................................................................................

src/users/User.jsx

//props is not keyword just variable convention
//props hold object , object has all properties what ever we passed from parent
const User = (props) => {
    console.log(props)
    return <div>
        <h3>Id : {props.id}</h3>
        <h3>Name : {props.userName}</h3>
        <h4>Email : {props.email}</h4>
        <h4>City : {props.address.city}</h4>
        <h4>Status : {props.status ? "Available" : "Not Available"}</h4>
    </div>
}
export { User }

src/App.jsx
import { User } from "./users/User";

// function App() {
//     return <>
//         {User(1, 'Subramanian Murugan', 'subu@gmail.com', { city: 'Coimbatore' }, true)}
//         {User(2, 'Murugan', 'murugan@gmail.com', { city: 'Chennai' }, false)}
//     </>
// }

function App() {
    return <>
           <User id={1} email='subu@gmail.com' userName='Subramanian Murugan'  address={{ city: 'Coimbatore' }} status={true} />
           <User id={1} email='subu@gmail.com' userName='Subramanian Murugan'  address={{ city: 'Coimbatore' }} status={true} />
           <User id={1} email='subu@gmail.com' userName='Subramanian Murugan'  address={{ city: 'Coimbatore' }} status={true} />
           <User id={1} email='subu@gmail.com' userName='Subramanian Murugan'  address={{ city: 'Coimbatore' }} status={true} />
    </>

}
export default App;
................................................................................
		Code Refactoring -  Object DE structuring and props
...............................................................................

Destructuring within function:
const User = (props) => {
    const { id, userName, email, address: { city }, status } = props
    return <div>
        <h3>Id : {id}</h3>
        <h3>Name : {userName}</h3>
        <h4>Email : {email}</h4>
        <h4>City : {city}</h4>
        <h4>Status : {status ? "Available" : "Not Available"}</h4>
    </div>
}
export { User }

Destructuring with function args
const User = ({ id, userName, email, address: { city }, status }) => <div>
    <h3>Id : {id}</h3>
    <h3>Name : {userName}</h3>
    <h4>Email : {email}</h4>
    <h4>City : {city}</h4>
    <h4>Status : {status ? "Available" : "Not Available"}</h4>
</div>

export { User }
..............................................................................
		Adding feature to the User Component -Image-Avatar
		   Component Composition and Props
...............................................................................
src/avatar/Avatar.jsx

const Avatar = ({ profilePic }) => <img src={profilePic} height={100} width={100} />

export { Avatar }

src/users/User.jsx
import { Avatar } from "../avatar/Avatar"

const User = ({ id, userName, email, address: { city }, status, profilePic }) => <div>
    {/* <img src={profilePic} height={100} width={100} /> */}
    <Avatar profilePic={profilePic} />
    <h3>Id : {id}</h3>
    <h3>Name : {userName}</h3>
    <h4>Email : {email}</h4>
    <h4>City : {city}</h4>
    <h4>Status : {status ? "Available" : "Not Available"}</h4>
</div>

export { User }

src/App.jsx
import { User } from "./users/User";

function App() {
    const profilePic = 'https://imgur.com/1bX5QH6.jpg'
    return <>
        <User id={1} profilePic={profilePic} email='subu@gmail.com' userName='Subramanian Murugan' address={{ city: 'Coimbatore' }} status={true} />
    </>

}
export default App;

How to inspect component tree?
 React dev tools
..................................................................................................................................................................................................................................
					 Default Props
....................................................................................................................................................................................................................................

component can receive more no number of properties, all properties we dont need it, if you want to use only specific properties , then we can use default props

Having defaults for any component when you design it.


src/users/User.jsx
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'

const User = ({ id = 0, userName = 'Your Name', email = 'Your email', address: { city = "Your City", state = "Your state" } = {}, status = false }) => <div>
    <h3>Id : {id}</h3>
    <h3>Name : {userName}</h3>
    <h4>Email : {email}</h4>
    <h4>City : {city}</h4>
    <h4>State :{state}</h4>
    <h4>Status : {status ? "Available" : "Not Available"}</h4>
</div>

const App = () => {
    return <>
        <User id={1} email='subu@gmail.com' userName='Subramanian Murugan' address={{ city: 'Coimbatore' }} status={true} />
        <User />
    </>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)

.................................................................................
			Forwarding Props with jsx Spread Notation
.................................................................................

Use Case : with Spread Notation:
................................
src/users/UserDetails.jsx
import { Avatar } from "../avatar/Avatar"

const UserDetails = ({ id = 0, userName = 'Your Name', email = 'Your email', city = "Your City", status = false, profilePic = '' }) => <div>
    <Avatar profilePic={profilePic} />
    <h3>Id : {id}</h3>
    <h3>Name : {userName}</h3>
    <h4>Email : {email}</h4>
    <h4>City : {city}</h4>
    <h4>Status : {status ? "Available" : "Not Available"}</h4>
</div>

export { UserDetails }

src/users/User.jsx
import { UserDetails } from "./UserDetails"

const User = ({ id = 0, userName = 'Your Name', email = 'Your email', address: { city = "Your City" }, status = false, profilePic = '' }) => <div>
    <UserDetails id={id}
        userName={userName}
        email={email}
        city={city}
        status={status}
        profilePic={profilePic} />
</div>



export { User }
src/App.jsx
import { User } from "./users/User";

function App() {
    const profilePic = 'https://imgur.com/1bX5QH6.jpg'
    return <>
        <User id={1} profilePic={profilePic} email='subu@gmail.com' userName='Subramanian Murugan' address={{ city: 'Coimbatore' }} status={true} />
    </>
}
export default App;


........

    <UserDetails id={id}
        userName={userName}
        email={email}
        city={city}
        status={status}
        profilePic={profilePic} />

Here we pass every prop manually, that can be avoided using spread notation.

Using Spread Notation:
src/users/User.jsx
import { UserDetails } from "./UserDetails"

const User = props => <div>
    {/* ... is Spread Notation: pass every property */}
    <UserDetails {...props}  />
</div>

export { User }
............................................................................................
				List Render
............................................................................................		
How to render list/Array?

npm create vite@latest list-app


To iterate list in react/reactnative

1.map
2.filter
3.find
4.reduce

based on arrays we can create many layouts

1.listView - ul--li
2.gridView - table tag
3.cardView - div/section

using map:

App.jsx
import { List } from "./list/List";

function App() {

  const subjects = ['React', 'ReactNative', 'Javascript', 'Mobile', 'Devops', 'Cloud']
  return <>
    <List subjects={subjects} />
  </>
}
export default App;

src/list/List.jsx

const List = (props) => {
    return <div>
        <h1>List</h1>
        <ul>
            {
                props.subjects.map(subject => {
                    return <li>{subject}</li>
                })
            }
        </ul>
    </div>
}
export { List }
.........................................................................................
		      How to render list of objects
...........................................................................................
Using mock data

import { ProductList } from "./list/List";
import { PRODUCTS } from "./mock-data/products";

function App() {

    return <>
        <ProductList products={PRODUCTS} />
    </>
}
export default App;

List.jsx

const ProductList = ({ products }) => {
    return <div>
        {
            products.map(product => {
                return <div key={product.id}>
                    <h2>{product.title}</h2>
                    <img src={product.image} height={150} width={150} />
                    <h5>Category: {product.category} Price : $ {product.price}</h5>
                    <p>{product.description} </p>
                    <h3>Rating : {product.rating.rate} Total {product.rating.count}</h3>
                </div>
            })
        }
    </div>
}
export { ProductList }
...........................................................................................
				Component Composition and List
...........................................................................................

List.jsx
import { ListItem } from "./ListeItem"

const ProductList = ({ products }) => <div>{
    products.map(product => <ListItem product={product} />)
}
</div>

export { ProductList }

ListItem.jsx

const ListItem = props => {
    return <div key={props.product.id}>
        <h2>{props.product.title}</h2>
        <img src={props.product.image} height={150} width={150} />
        <h5>Category: {props.product.category} Price : $ {props.product.price}</h5>
        <p>{props.product.description} </p>
        <h3>Rating : {props.product.rating.rate} Total {props.product.rating.count}</h3>
    </div>
}
export { ListItem }

App.jsx
import { ProductList } from "./list/List";
import { PRODUCTS } from "./mock-data/products";

function App() {

    return <>
        <ProductList products={PRODUCTS} />
    </>
}
export default App;
.....................................................................................................................................................................................................................................
..........................................................................................................................................................
						Styling
..........................................................................................................................................................

web apps which are running inside browser, is based "CSS" styling language.

There are two ways to apply CSS to react components

1.external styles
2.inline style

external styles are applied via style sheet.

app.css, index.css

style selectors

inside code

import './App.css'

<div className="background">

</div>

inline Style:
  css styles are applied via JavaScript object style object

<div style={StyleObject} </div>

You can write your own css styles, but mostly not recommended, because we have to use css frameworks 

1.bootstrap
2.tailwindcss


How to integrate tailwind css framework:

Steps:
01.
Create your project
Start by creating a new Vite project if you donâ€™t have one set up already. The most common approach is to use Create Vite.

npm create vite@latest styling-app
cd  styling-app


02
Install Tailwind CSS
Install tailwindcss and @tailwindcss/vite via npm.

npm install tailwindcss @tailwindcss/vite


03
Configure the Vite plugin
Add the @tailwindcss/vite plugin to your Vite configuration.


vite.config.js
import { defineConfig } from 'vite'
import tailwindcss from '@tailwindcss/vite'

export default defineConfig({
  plugins: [
    tailwindcss(),
  ],
})
with React:
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(),tailwindcss()],
})


04
Import Tailwind CSS
Add an @import to your CSS file that imports Tailwind CSS

src/index.css
@import "tailwindcss";

05.Add in the src/main.jsx
import './index.css'



import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

// const styles = { fontWeight: 'bold', fontSize: 80, color: 'blue' }
const styles = {
    header: {
        fontWeight: 'bold', fontSize: 80, color: 'blue'
    },
    container: {
        backgroundColor: 'yellow'
    }
}

const Header = () => {
    return <div className="m-40" style={styles.container}>
        <h1 style={{ fontWeight: 'bold', fontSize: 80, color: 'blue' }}>Hello</h1>
        <h1 style={styles.header}>Hello</h1>

    </div>
}


const App = () => {
    return <>
        <Header />
    </>
}
createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)

