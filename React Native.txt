                                      React Native
.....................................................................................

What is React Native?

1.React Native is js lib for building native mobile apps 
2.React Native combines the best parts of native development with React, a best-in-class  JavaScript library for building user interfaces.

Mobile App development:

Mobile apps are built using mobile platforms and os.

Mobile platforms:
1.Android
2.Ios

Mobile devices are acting front end devices, user interfaces communicates back end services.

Dev:
 1.user interface developer/front end developer
 2.back end developer
 3.full stack developer.

Front end developer who dev apps for  front devices.

Dev generally build apps for desktops:
  Standalone desktop apps
  Browser based apps- javascript,html,css - react,angular,vue.....

Mobile /Tab apps:
 Dev builds apps for android platform using java , kotlin pl.
 in iOS development, you use Swift or Objective-C.

Types of mobile Apps:
.....................

1.Native Mobile
2.Web apps
3.Hybrid apps

1.Native Mobile
   Mobile apps are built by using native platform languages- java / Swift.
2.Web apps
   Apps built for browsers -Mobile browsers
3.Hybrid  apps
   built apps using JavaScript but it wont run inside browser, runs inside mobile using container(WebView).

Hybrid apps:

 Application built using java script, css ,html ,looks like native apps.

Why Hybrid Apps?

-incase native apps, we need to maintain two code base for both platform.

Why not to build one single portable app for all platforms?

 That is birth of hybrid apps.

Hybrids apps can be built using existing web tech- js,css,html.
Js is simple dom language, how to access platform services such as contacts,networks,storage..
- a lib was created -cordova , based on cordova adobe started building a framework on top of the cordova , called phoneGap.

How to build mobile native apps in portable way using same javascript technology without html and css?

....................................................................................
 			React Native Application Architecture
....................................................................................
react native is js lib inspired from react.

react was created for browser apps

react core features 
-components
-props
-state
-hooks
-state management

react native was not created like previous hybrid technology.

react  +  native (android /ios)

react is js  + native means platform

User face:
     Mark up - describes ui structure for eg  text box,buttons,images
     logic  - describes how ui interacts with user
..........................................................................................................................................................................................................................................
									  React native and UI


React Native================>Native Application
 (react)                                            => android or ios
   (js) ======================>Kotlin or swift

layers:

1.js layer
	your code ui - components,biz logic,api calls
        inside a js engine - Hermes

2.bridge layer/communication layer
    responsible for communication between js code and native layer
    convers js code into native calls - c/c++ calls
  
2.native layer
 ios - swift
 android -kotlin/java
native components-camera,gps,sensors and 

Components of the react native:

1.JSI - javascript interface

2.Turbo modules

3.Fabric


React native applications are written using react(js) core principles
 -Component
 -Props
 -State
 -Event Handling
 -hooks
 -life cycle events

Every react native apps are simple JavaScript code.

In React Native, there is no webview concept. React native never run inside browser.

ReactNative code base is classified into two category

1.User Interface
2.Application logic

In Normal react js, User interface is written using HTML language, application logic is written using plain js(react js using state,events,props)...

In React Native, User interface is written using "Mobile Elements", application logic is written using plain js(react js using state,events,props)...


UI Mark Up code for React native:

React native does not use html language to build ui elements.

React Native provides a high level ui components already written, so we can use those
components only .Why?

We are building portable application either for android or ios.
So we need generic concept for both  platforms. 
For that React native provides a generic components for both platforms.

What is it? What is happening during compilation?

Source code is converted into another source code - Compilation.
Another code is platform specific code. android code or ios code.
if i wirte ui components, ui components will be converted to platform specific components.
javascript code will be emitted as it is-app code.

How react native apps are executed?  Execution Model:
.....................................................

All views are executed by platform runtimes eg: android by art.
All javascript is executed by Hermes Js engine.
https://hermesengine.dev/

How to build react native apps?

React native apps can be built using two work flows.


1.Native Work flow
 If you are already familiar with mobile development, you may want to use React Native CLI.
 It requires Xcode or Android Studio to get started. If you already have one of these tools installed, you should be able to get up and running within a few minutes. If they are not installed, you should expect to spend about an hour installing and configuring them.

2.Expo Work Flow.
  If you are new to mobile development, the easiest way to get started is with Expo CLI. Expo is a set of tools built around React Native and, while it has many features, the most relevant feature for us right now is that it can get you writing a React Native app within minutes

Native work flow:
 
if you want to build professional mobile app you need lot of infrastructure.
 UI Components
    -Views,Text,Labels,ListViews,ScrollView,TabView...........

React native core team provides all core components necessary to build mobile apps.

What if i want more components which is not supported by react core team.

YOu need to look at community or companies who provides professional mobile apps.

-Community -https://reactnative.directory/


Expo Work flow:
...............
What is expo?

 Expo is a framework and a platform for universal React applications. It is a set of tools and services built around React Native and native platforms that help you develop, build, deploy, and quickly iterate on iOS, Android, and web apps from the same JavaScript/TypeScript codebase.
.....................................................................................
.....................................................................................
Project Setup:

.....................................................................................
			ReactNative Project
....................................................................................

You can setup either using React Native cli or EXPO Cli.


React Native cli:
................

Windows-Android:

Requirements:

Node js,
React Native command line interface,
JDK,
Android Studio

https://reactnative.dev/docs/environment-setup?guide=native&os=windows&platform=android


npx @react-native-community/cli@latest init AwesomeProject

When you create project and building project

1.you should create project in powershell or bash shell with admin rights.


npx @react-native-community/cli@latest init  MyReactNativeApp


√ Downloading template
√ Copying template
√ Processing template
√ Installing dependencies
√ Initializing Git repository


  Run instructions for Android:
    • Have an Android emulator running (quickest way to get started), or a device connected.
    • cd "G:\IBM\2024\Nov\ReactiveNative-B1\MyReactNativeApp" && npx react-native run-android

  Run instructions for Windows:
    • See https://aka.ms/ReactNativeGuideWindows for the latest up-to-date instructions.


How to run react native project either for android or ios

Way 1
npx react-native run-android or npx react-native run-ios

Way 2

npm run android or npm run ios

Way 3

npm start
 
ios - i
android - a
......................................................................................................
Compiler Configuration:

React Native uses different compilers

1.babel
  convert jsx code into java script
2.Metro Bundler -https://facebook.github.io/metro/
  Convert React native code into Platform specific code..

config files:

1.package.json
   This is project configuration files 
 -scripts
      "android": "react-native run-android",
      "ios": "react-native run-ios",
      "start": "react-native start",
   How to use this script?
    npm run android -->which deploys apps in android
    npm run ios --->which deploys apps in ios 
    npm start --> which shows options and later you can select env

 -dependencies
	react  - contains core react features-components,props,state,events
	react-native -contains core react native/mobile compoents and apis


2.tsconfig.json
   By default , react native apps enables type script support which is super set of java script language.

3.metro.config.js
  Metro bundler configuration, metro is responsible for converting js code into native code.

4.jest.config.js
   Unit testing and e2e testing setup.

5.app.json 
  This is file where you can configure application properties

6. .eslintrc.json
   This is file which contains linting rules - static code analysis rules.

7. babel.config.js
    jsx compiler configuration, which converts jsx code into javascript..


Folders:
........
node_modules
   Contains libs and framework code
.bundle 
   contains bundled executable code
Andorid
IOS
....................................................................................
How to build the project?

npm run android
or
npx react-native run-android
or 
npm start

....................................................................................

Entry file:

index.js

import {AppRegistry} from 'react-native';
import App from './App';
import {name as appName} from './app.json';

AppRegistry.registerComponent(appName, () => App);
		|
               Mounting root Component

Root Component is always App Component.
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										React Native Core Components
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

React Native provides lot of built in components which directly is mapped against Mobile user interfaces

Basic Components:
1.Text
2.View
3.Image
3.TextInput
4.ScrollView
5.Pressable
6.StyleSheet

User Interface Components

1.Button
2.Switch

ListView 
1.FlatList
2.SectionList

Others:
1.Activity Indicator
2.Alert
3.StatusBar
4.Modal
5.TouchableHighlight
6.TouchableOpacity
7.ImageBackground
etc...

The above components are provided by core react native team, apart from if you want any component you can install from reactnative community.


According to react native version 0.81.4, The App Component must have "SafeArea Provider" which is should be root Component

SafeAreaProvider:

SafeAreaProvider which is from react-native-safe-area-context

SafeAreaView: 
  	It is from React native core lib but now this api has been deprecated and replaced by SafeAreaProvider
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

SafeAreaView:
 comes built in with react native  import {SafeAreaView} from 'react-native';

What is it?
   It ensures that content "does not overlap system UI"
	-Notch (iPhone x and above)
       -status bar
      -Home indicator (IOS bottom bar)

Platform support:
   Works reliably on IOS
   On Android behaviour is very limited some times it ignores

You can use this when you dont care about android cutouts.

SafeAreaProvider:

1.Context Provider you wrap your app with.
2.Calculates intsets (top,bottom,left,right) based on the device's safe
    insets:
       are padding values that tell your app how much space it needs to avoid overlapping with system level user interface elements or physical
       devices features
3.Need only once at the root of your app

useSafeAreaIntsets hooks:
   ->Gives you extact values for top/bottom/left/right padding
   ->Lets you manually apply insets (eg custom headers/footers)

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
											StatusBar

What is the Status bar?
The Status bar is area at the top of the screen(battery,time,wi-fi,etc)
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										NewAppScreen


It is package is maintained by the react native team that provides the default Welcome Screen UI you see when you create new React native native project.

If you start writing your own ui, you can remove this.


Final Code:

App.jsx
import React from 'react';
import { StatusBar, StyleSheet, useColorScheme, View, Text } from 'react-native';
import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';

function App() {
  const isDarkMode = useColorScheme() === 'dark';

  return (
    <SafeAreaProvider>
      <StatusBar barStyle={isDarkMode ? 'light-content' : 'dark-content'} />
      <AppContent isDarkMode={isDarkMode} />
    </SafeAreaProvider>
  );
}

function AppContent({ isDarkMode }) {
  const insets = useSafeAreaInsets();
  return (
    <View
      style={[
        styles.container,
        {
          paddingTop: insets.top,
          paddingBottom: insets.bottom,
          paddingLeft: insets.left,
          paddingRight: insets.right,
          backgroundColor: isDarkMode ? '#121212' : '#fff',
        },
      ]}
    >
      <Text style={[styles.title, { color: isDarkMode ? '#fff' : '#000' }]}>
        🚀 Welcome to My React Native App!
      </Text>
      <Text style={[styles.subtitle, { color: isDarkMode ? '#aaa' : '#555' }]}>
        Start editing <Text style={styles.code}>App.tsx</Text> to see your changes.
      </Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: '700',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    textAlign: 'center',
  },
  code: {
    fontWeight: 'bold',
    color: '#61dafb',
  },
});

export default App;

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
											Style sheet
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

React Native offers styles via javascript css sytle syntax.
React native converts styles according platform - android styles or ios styles

StyleSheet:

 It is component used to create and apply styles

How to create style sheet:

Syntax:
 const styles= StyleSheet.create(styleconfigObject)

here styles refers the object which contains the style properties

StyleConfig Object:
   Describes css style properties

StyleSheet.create({
   key: { 
	cssProp:value
   }
})

Key is category of style and value is style config
Key can be any name which represents your category
like:
  container,text,label,List,images

const styles = StyleSheet.create({
   container:{ 
	 backgroundColor:'#ff000080'
         flex:1
   },
   text: {}
})

if you want to apply to any element(Componet)

 <View style={styles.container} />
 
<Text style={styles.text}></Text>

The above is resuable , if you want to use inline style

<Text style={{color:'red'}}>Hello</Text>

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&											Coimbing mutiple styles
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&


Lets say i have declared the below style

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: '700',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    textAlign: 'center',
  },
  code: {
    fontWeight: 'bold',
    color: '#61dafb',
  },
});

Syntax
<Text style={ [styles.title + extra style] }>Hello</Text>
<Text style={ [styles.title ,{color:'red'} ]}>Hello</Text>

import React from 'react';
import { StatusBar, StyleSheet, useColorScheme, View, Text } from 'react-native';
import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';

function App() {
  const isDarkMode = useColorScheme() === 'dark';

  return (
    <SafeAreaProvider>
      <StatusBar barStyle={isDarkMode ? 'light-content' : 'dark-content'} />
      <AppContent isDarkMode={isDarkMode} />
    </SafeAreaProvider>
  );
}

function AppContent({ isDarkMode }) {
  const insets = useSafeAreaInsets();
  return (
    <View
      style={[
        styles.container,
        {
          paddingTop: insets.top,
          paddingBottom: insets.bottom,
          paddingLeft: insets.left,
          paddingRight: insets.right,
          backgroundColor: isDarkMode ? '#121212' : '#fff',
        },
      ]}
    >
      <Text style={[styles.title, { color: isDarkMode ? '#fff' : '#000' }]}>
        🚀 Welcome to My React Native App!
      </Text>
      <Text style={[styles.subtitle, { color: isDarkMode ? '#aaa' : '#555' }]}>
        Start editing <Text style={styles.code}>App.tsx</Text> to see your changes.
      </Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: '700',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    textAlign: 'center',
  },
  code: {
    fontWeight: 'bold',
    color: '#61dafb',
  },
});

export default App;
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										Device Color Scheme
************************************************************************************************************************************************************

In React Native, useColorScheme is a built in react hook that lets you detect whether the user device is currently using light mode or dark mode

useColorScheme() is dervied "Appearance" from react native core package

It detects the systems native color
 
light -  if system is in light mode - white background,black text
dark - if system is in dark mode - black background, white text
null  - default color 

import React from 'react';
import { StatusBar, StyleSheet, useColorScheme, View, Text } from 'react-native';
import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';

function Greet({isDarkMode}) {
    return <>
       <Text style={[styles.title, { color: isDarkMode ? '#fff' : '#000' }]}>
        🚀 Welcome to My React Native App!
      </Text>
    </>
}

function App() {
    const isDarkMode = useColorScheme() === 'dark';
    console.log('mode',isDarkMode)
    return (
        <SafeAreaProvider>
            <StatusBar barStyle={isDarkMode ? 'light-content' : 'dark-content'} />
            <AppContent isDarkMode={isDarkMode} />
        </SafeAreaProvider>
    );
}

function AppContent({ isDarkMode }) {
    const insets = useSafeAreaInsets();
    return (
        <View
            style={[
                styles.container,
                {
                    paddingTop: insets.top,
                    paddingBottom: insets.bottom,
                    paddingLeft: insets.left,
                    paddingRight: insets.right,
                    backgroundColor: isDarkMode ? '#121212' : '#fff',
                },
            ]}
        >
            {/* Child Component */}
            <Greet isDarkMode={isDarkMode} />
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
    },
    title: {
        fontSize: 24,
        fontWeight: '700',
        marginBottom: 8,
    },
    subtitle: {
        fontSize: 16,
        textAlign: 'center',
    },
    code: {
        fontWeight: 'bold',
        color: '#61dafb',
    },
});

export default App;
********************************************************************************************************************************************************
										Component Composition


components/User.jsx
import { View, Text } from "react-native"
export default function User(props) {
    const { id, name } = props
    return <View>
        <Text>Id : {id}</Text>
        <Text>Name : {name}</Text>
    </View>
}

App.jsx
import { StatusBar, StyleSheet, useColorScheme, View, Text } from 'react-native';
import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';
import User from './components/User';


function App() {
    const isDarkMode = useColorScheme() === 'dark';
    console.log('mode',isDarkMode)
    return (
        <SafeAreaProvider>
            <StatusBar barStyle={isDarkMode ? 'light-content' : 'dark-content'} />
            <AppContent isDarkMode={isDarkMode} />
        </SafeAreaProvider>
    );
}

function AppContent({ isDarkMode }) {
    const insets = useSafeAreaInsets();
    return (
        <View
            style={[
                styles.container,
                {
                    paddingTop: insets.top,
                    paddingBottom: insets.bottom,
                    paddingLeft: insets.left,
                    paddingRight: insets.right,
                    backgroundColor: isDarkMode ? '#121212' : '#fff',
                },
            ]}
        >
            {/* Child Component */}
            <User id={1} name='Subramanian'/>
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
    },
    title: {
        fontSize: 24,
        fontWeight: '700',
        marginBottom: 8,
    },
    subtitle: {
        fontSize: 16,
        textAlign: 'center',
    },
    code: {
        fontWeight: 'bold',
        color: '#61dafb',
    },
});

export default App;
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
								    Styles Abstractions

styles/index.jsx
import { StyleSheet } from "react-native"

export const styles = StyleSheet.create({
    title: {
        color: 'blue'
    }
})

components/User.jsx
import { View, Text, StyleSheet } from "react-native"
import { styles } from "../styles"

export default function User(props) {
    const { id, name } = props
    return <View>
        <Text style={[styles.title]}>Id : {id}</Text>
        <Text>Name : {name}</Text>
    </View>
}

// const styles = StyleSheet.create({
//     title: {
//         color: 'blue'
//     }
// })
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										State and React Native
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Component : Button

components/Counter.jsx
import { useState } from "react";
import { View, Text, Button } from "react-native";

export function Counter() {
    const [counter, setCounter] = useState(0)

    const onIncrement = () => {
        setCounter(counter + 1)
    }
    return <View>
        <Text>Counter : {counter}</Text>
        <Button title="Increment" onPress={onIncrement} />
    </View>
}

App.jsx
import { StatusBar, StyleSheet, useColorScheme, View, Text } from 'react-native';
import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';
import { Counter } from './components/Counter';


function App() {
    const isDarkMode = useColorScheme() === 'dark';
    console.log('mode',isDarkMode)
    return (
        <SafeAreaProvider>
            <StatusBar barStyle={isDarkMode ? 'light-content' : 'dark-content'} />
            <AppContent isDarkMode={isDarkMode} />
        </SafeAreaProvider>
    );
}

function AppContent({ isDarkMode }) {
    const insets = useSafeAreaInsets();
    return (
        <View
            style={[
                styles.container,
                {
                    paddingTop: insets.top,
                    paddingBottom: insets.bottom,
                    paddingLeft: insets.left,
                    paddingRight: insets.right,
                    backgroundColor: isDarkMode ? '#121212' : '#fff',
                },
            ]}
        >
        <Counter/>
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
    },
    title: {
        fontSize: 24,
        fontWeight: '700',
        marginBottom: 8,
    },
    subtitle: {
        fontSize: 16,
        textAlign: 'center',
    },
    code: {
        fontWeight: 'bold',
        color: '#61dafb',
    },
});

export default App;
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
											API Calls and React Native
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

components/Products.jsx
import { produce } from 'immer'
import { useEffect, useState } from 'react'
import { View, Text } from 'react-native'

function ProductList() {
    const [products, setProducts] = useState({ products: [], isLoading: false, error: null })
    async function fetchProducts() {
        try {
            const url = `https://api.escuelajs.co/api/v1/products`
            const response = await fetch(url)
            const tmpProducts = await response.json()
            setProducts(produce(products, (draft) => {
                draft.products = tmpProducts
                draft.isLoading = true
            }))
        }
        catch (err) {
            setProducts(produce(products, (draft) => {
                draft.err = err
                draft.isLoading = true
            }))
        }
    }
    //componentDidMount
    useEffect(() => {
        //any async task
        fetchProducts()
    }, [])
    //conditional rendering: how to use if...else..elseif
    if (products.error) {
        return <View>
            <Text>Error : {error.message}</Text>
        </View>
    } else if (!products.isLoading) {
        return <Text>Loading...</Text>
    } else {
        return <View>
            <View>
                {
                    products.products.map(product => {
                        return <View  key={product.id}>
                            <Text>{product.title} </Text>
                        </View>
                    })
                }
            </View>
        </View>
    }
}
export { ProductList }

App.jsx
import { StatusBar, StyleSheet, useColorScheme, View, Text } from 'react-native';
import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';
import { ProductList } from './components/Products';


function App() {
    const isDarkMode = useColorScheme() === 'dark';
    console.log('mode',isDarkMode)
    return (
        <SafeAreaProvider>
            <StatusBar barStyle={isDarkMode ? 'light-content' : 'dark-content'} />
            <AppContent isDarkMode={isDarkMode} />
        </SafeAreaProvider>
    );
}

function AppContent({ isDarkMode }) {
    const insets = useSafeAreaInsets();
    return (
        <View
            style={[
                styles.container,
                {
                    paddingTop: insets.top,
                    paddingBottom: insets.bottom,
                    paddingLeft: insets.left,
                    paddingRight: insets.right,
                    backgroundColor: isDarkMode ? '#121212' : '#fff',
                },
            ]}
        >
        <ProductList/>
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        // alignItems: 'center',
        // justifyContent: 'center',
    },
    title: {
        fontSize: 24,
        fontWeight: '700',
        marginBottom: 8,
    },
    subtitle: {
        fontSize: 16,
        textAlign: 'center',
    },
    code: {
        fontWeight: 'bold',
        color: '#61dafb',
    },
});

export default App;


In the code, you can note down the product has rendered but there is no scroll bar is attached so that we cant view the items beyond the current screen.


....................................................................................................................................................................................................................................................
									 Container Components
....................................................................................................................................................................................................................................................

Container components are components which contains other components which is called "View" in React Native.

Types of Views:

1.View
2.ScrollView
3.ListView
4.SectionList

....................................................................................................................................................................................................................................................
								         	Scroll Behaviour
.................................................................................................................................................................................................................................................
View is going to hold child elements, act as container
ScrollView is also container but has default scroll bar is added

components/products.jsx
import { produce } from 'immer'
import { useEffect, useState } from 'react'
import { View, Text, ScrollView, StyleSheet } from 'react-native'

function ProductList() {
    const [products, setProducts] = useState({ products: [], isLoading: false, error: null })
    async function fetchProducts() {
        try {
            const url = `https://api.escuelajs.co/api/v1/products`
            const response = await fetch(url)
            const tmpProducts = await response.json()
            setProducts(produce(products, (draft) => {
                draft.products = tmpProducts
                draft.isLoading = true
            }))
        }
        catch (err) {
            setProducts(produce(products, (draft) => {
                draft.err = err
                draft.isLoading = true
            }))
        }
    }
    //componentDidMount
    useEffect(() => {
        //any async task
        fetchProducts()
    }, [])
    //conditional rendering: how to use if...else..elseif
    if (products.error) {
        return <View>
            <Text style={styles.label}>Error : {error.message}</Text>
        </View>
    } else if (!products.isLoading) {
        return <Text style={styles.label}>Loading...</Text>
    } else {
        return   <ScrollView>
            {
                products.products.map(product => {
                    return <Text key={product.id} style={[styles.label]}>{product.title} </Text>
                })
            }
        </ScrollView>
    }
}
export { ProductList }

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        justifyContent: 'center',
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue',
        alignItems:'center',
        justifyContent:'center'
    }
})

App.jsx
import { StatusBar, StyleSheet, useColorScheme, View, Text } from 'react-native';
import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';
import { ProductList } from './components/Products';


function App() {
    const isDarkMode = useColorScheme() === 'dark';
    console.log('mode',isDarkMode)
    return (
        <SafeAreaProvider>
            <StatusBar barStyle={isDarkMode ? 'light-content' : 'dark-content'} />
            <AppContent isDarkMode={isDarkMode} />
        </SafeAreaProvider>
    );
}

function AppContent({ isDarkMode }) {
    const insets = useSafeAreaInsets();
    return (
        <View
            style={[
                styles.container,
                {
                    paddingTop: insets.top,
                    paddingBottom: insets.bottom,
                    paddingLeft: insets.left,
                    paddingRight: insets.right,
                    backgroundColor: isDarkMode ? '#121212' : '#fff',
                },
            ]}
        >
        <ProductList/>
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        // alignItems: 'center',
        // justifyContent: 'center',
    },
    title: {
        fontSize: 24,
        fontWeight: '700',
        marginBottom: 8,
    },
    subtitle: {
        fontSize: 16,
        textAlign: 'center',
    },
    code: {
        fontWeight: 'bold',
        color: '#61dafb',
    },
});

export default App;
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										FlatList
React Native provides a suit of components for presenting lists of data, Generally, You will want to use "FlatList or Section List"


FlatList:
 It displays a scrolling list of changining, but similary structured data.
 FlatList works well for long list of data , where number of items change over time.
 
When compare to ScrollView,The FlatList only renders elements that are currently showing on the screen, not all the elements at onces.



FlatList is similar to array.map in react.

FlatList requires two properties:

1.data
  data Source
2.renderItem
  takes one item from the source and returns a formtted component to render.

FlatList with HardCoded data.
.............................
<FlatList data={dataSource} renderItem={(obj)=>{
  return<Text>{obj.item.dataSource.property}</Text>
}}

data->Data Prop is called datasource which is plain array
renderItem -
  Takes an item from data prop and renders it into list

renderItem({
 item:ItemObject(todo,contact),
 index:number,
 separators:{

 }
})

App.jsx
import { StatusBar, StyleSheet, useColorScheme, View, Text } from 'react-native';
import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';
import { ProductList } from './components/Products';


function App() {
    const isDarkMode = useColorScheme() === 'dark';
    console.log('mode',isDarkMode)
    return (
        <SafeAreaProvider>
            <StatusBar barStyle={isDarkMode ? 'light-content' : 'dark-content'} />
            <AppContent isDarkMode={isDarkMode} />
        </SafeAreaProvider>
    );
}

function AppContent({ isDarkMode }) {
    const insets = useSafeAreaInsets();
    return (
        <View
            style={[
                styles.container,
                {
                    paddingTop: insets.top,
                    paddingBottom: insets.bottom,
                    paddingLeft: insets.left,
                    paddingRight: insets.right,
                    backgroundColor: isDarkMode ? '#121212' : '#fff',
                },
            ]}
        >
        <ProductList/>
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        // alignItems: 'center',
        // justifyContent: 'center',
    },
    title: {
        fontSize: 24,
        fontWeight: '700',
        marginBottom: 8,
    },
    subtitle: {
        fontSize: 16,
        textAlign: 'center',
    },
    code: {
        fontWeight: 'bold',
        color: '#61dafb',
    },
});

export default App;

components/Products.jsx

import { produce } from 'immer'
import { useEffect, useState } from 'react'
import { View, Text, ScrollView, StyleSheet, FlatList } from 'react-native'

function ProductList() {
    const [products, setProducts] = useState({ products: [], isLoading: false, error: null })
    async function fetchProducts() {
        try {
            const url = `https://api.escuelajs.co/api/v1/products`
            const response = await fetch(url)
            const tmpProducts = await response.json()
            setProducts(produce(products, (draft) => {
                draft.products = tmpProducts
                draft.isLoading = true
            }))
        }
        catch (err) {
            setProducts(produce(products, (draft) => {
                draft.err = err
                draft.isLoading = true
            }))
        }
    }
    //componentDidMount
    useEffect(() => {
        //any async task
        fetchProducts()
    }, [])
    //conditional rendering: how to use if...else..elseif
    if (products.error) {
        return <View>
            <Text style={styles.label}>Error : {error.message}</Text>
        </View>
    } else if (!products.isLoading) {
        return <Text style={styles.label}>Loading...</Text>
    } else {
        return <FlatList
            data={products.products}
            keyExtractor={item => item.id}
            renderItem={({ item }) => <Text style={[styles.label]}>{item.title}</Text>}
        />
    }
}
export { ProductList }

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'pink',
        justifyContent: 'center',
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue',
        alignItems: 'center',
        justifyContent: 'center'
    }
})
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										  Spinner - ActivityIndicator
..........................................................................................................................................................................................................................................
Displays a circular loading indicator.


components/Products.jsx
import { produce } from 'immer'
import { useEffect, useState } from 'react'
import { View, Text, ScrollView, StyleSheet, FlatList,ActivityIndicator } from 'react-native'

function ProductList() {
    const [products, setProducts] = useState({ products: [], isLoading: false, error: null })
    async function fetchProducts() {
        try {
            const url = `https://api.escuelajs.co/api/v1/products`
            const response = await fetch(url)
            const tmpProducts = await response.json()
            setProducts(produce(products, (draft) => {
                draft.products = tmpProducts
                draft.isLoading = true
            }))
        }
        catch (err) {
            setProducts(produce(products, (draft) => {
                draft.err = err
                draft.isLoading = true
            }))
        }
    }
    //componentDidMount
    useEffect(() => {
        //any async task
        fetchProducts()
    }, [])
    //conditional rendering: how to use if...else..elseif
    if (products.error) {
        return <View >
            <Text style={styles.label}>Error : {error.message}</Text>
        </View>
    } else if (!products.isLoading) {
        return <View style={styles.container}>
              <ActivityIndicator  size="large" color="#00ff00"/>
        </View>
    } else {
        return <FlatList
            data={products.products}
            keyExtractor={item => item.id}
            renderItem={({ item }) => <Text style={[styles.label]}>{item.title}</Text>}
        />
    }
}
export { ProductList }

const styles = StyleSheet.create({
    container: {
        flex: 1,

        backgroundColor: 'pink',
        justifyContent: 'center',
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue',
        alignItems: 'center',
        justifyContent: 'center'
    }
})

App.jsx
import { StatusBar, StyleSheet, useColorScheme, View, Text } from 'react-native';
import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';
import { ProductList } from './components/Products';


function App() {
    const isDarkMode = useColorScheme() === 'dark';
    console.log('mode',isDarkMode)
    return (
        <SafeAreaProvider>
            <StatusBar barStyle={isDarkMode ? 'light-content' : 'dark-content'} />
            <AppContent isDarkMode={isDarkMode} />
        </SafeAreaProvider>
    );
}

function AppContent({ isDarkMode }) {
    const insets = useSafeAreaInsets();
    return (
        <View
            style={[
                styles.container,
                {
                    paddingTop: insets.top,
                    paddingBottom: insets.bottom,
                    paddingLeft: insets.left,
                    paddingRight: insets.right,
                    backgroundColor: isDarkMode ? '#121212' : '#fff',
                },
            ]}
        >
        <ProductList/>
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        // alignItems: 'center',
        // justifyContent: 'center',
    },
    title: {
        fontSize: 24,
        fontWeight: '700',
        marginBottom: 8,
    },
    subtitle: {
        fontSize: 16,
        textAlign: 'center',
    },
    code: {
        fontWeight: 'bold',
        color: '#61dafb',
    },
});

export default App;

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
								Item Selection

import { StatusBar, StyleSheet, useColorScheme, View, Text, FlatList, ActivityIndicator, Alert } from 'react-native';
import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';
import { useState, useEffect } from 'react';
// import { ProductList } from './components/Products';
import TODOS from './mock-data/todos';
import { produce } from 'immer'

function List(props) {
    const [todos, setTodos] = useState({ items: [], isLoading: false, error: null })


    const onItemSelect = item=>{
        // Alert
        Alert.alert(JSON.stringify(item))
    }
    async function fetchTodos() {
        try {
            const url = `https://jsonplaceholder.typicode.com/todos`
            const response = await fetch(url)
            const tmpTodos = await response.json()
            setTodos(produce(todos, (draft) => {
                draft.items = tmpTodos
                draft.isLoading = true
            }))
        }
        catch (err) {
            setTodos(produce(todos, (draft) => {
                draft.err = err
                draft.isLoading = true
            }))
        }
    }
    //componentDidMount
    useEffect(() => {
        //any async task
        fetchTodos()
    }, [])

    if (todos.error) {
        return <View>
            <Text>{todos.error.message}</Text>
        </View>
    } else if (!todos.isLoading) {
        return <View style={styles.container}>
            <ActivityIndicator size="large" color="#00ff00" />
        </View>
    } else {
        return <FlatList data={props.todos} keyExtractor={item => item.id} renderItem={(obj) => {
            return <Text style={styles.title} onPress={()=>{
                onItemSelect(obj.item)
            }}>
                {obj.item.title}
            </Text>
        }
        } />
    }
}

function App() {
    const isDarkMode = useColorScheme() === 'dark';
    console.log('mode', isDarkMode)
    return (
        <SafeAreaProvider>
            <StatusBar barStyle={isDarkMode ? 'light-content' : 'dark-content'} />
            <AppContent isDarkMode={isDarkMode} />
        </SafeAreaProvider>
    );
}

function AppContent({ isDarkMode }) {
    const insets = useSafeAreaInsets();
    return (
        <View
            style={[
                styles.container,
                {
                    paddingTop: insets.top,
                    paddingBottom: insets.bottom,
                    paddingLeft: insets.left,
                    paddingRight: insets.right,
                    backgroundColor: isDarkMode ? '#121212' : '#fff',
                },
            ]}
        >
            <List todos={TODOS} />
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
    },
    title: {
        fontSize: 24,
        fontWeight: '700',
        color: 'blue',
        marginBottom: 8,
    },
    subtitle: {
        fontSize: 16,
        textAlign: 'center',
    },
    code: {
        fontWeight: 'bold',
        color: '#61dafb',
    },
});

export default App;

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
			       Select Item with Touchable Features
..................................................................................................................................................................................................................................................

In order to add touchable features , react native offers many components

1.TouchableHighlight
2.TouchableOpacity
3.TouchableWithoutFeedBack



import { StatusBar, StyleSheet, useColorScheme, View, Text, FlatList, ActivityIndicator, Alert, TouchableHighlight } from 'react-native';
import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';
import { useState, useEffect } from 'react';
// import { ProductList } from './components/Products';
import TODOS from './mock-data/todos';
import { produce } from 'immer'

function List(props) {
    const [todos, setTodos] = useState({ items: [], isLoading: false, error: null })


    const onItemSelect = item => {
        // Alert
        Alert.alert(JSON.stringify(item))
    }
    async function fetchTodos() {
        try {
            const url = `https://jsonplaceholder.typicode.com/todos`
            const response = await fetch(url)
            const tmpTodos = await response.json()
            setTodos(produce(todos, (draft) => {
                draft.items = tmpTodos
                draft.isLoading = true
            }))
        }
        catch (err) {
            setTodos(produce(todos, (draft) => {
                draft.err = err
                draft.isLoading = true
            }))
        }
    }
    //componentDidMount
    useEffect(() => {
        //any async task
        fetchTodos()
    }, [])

    if (todos.error) {
        return <View>
            <Text>{todos.error.message}</Text>
        </View>
    } else if (!todos.isLoading) {
        return <View style={styles.container}>
            <ActivityIndicator size="large" color="#00ff00" />
        </View>
    } else {
        return <FlatList data={props.todos} keyExtractor={item => item.id} renderItem={(obj) => {
            return <TouchableHighlight activeOpacity={0.4} underlayColor={'lightgreen'} onPress={() => {
                onItemSelect(obj.item)
            }}>
                <Text style={styles.title} >
                    {obj.item.title}
                </Text>
            </TouchableHighlight>
        }
        } />
    }
}

function App() {
    const isDarkMode = useColorScheme() === 'dark';
    console.log('mode', isDarkMode)
    return (
        <SafeAreaProvider>
            <StatusBar barStyle={isDarkMode ? 'light-content' : 'dark-content'} />
            <AppContent isDarkMode={isDarkMode} />
        </SafeAreaProvider>
    );
}

function AppContent({ isDarkMode }) {
    const insets = useSafeAreaInsets();
    return (
        <View
            style={[
                styles.container,
                {
                    paddingTop: insets.top,
                    paddingBottom: insets.bottom,
                    paddingLeft: insets.left,
                    paddingRight: insets.right,
                    backgroundColor: isDarkMode ? '#121212' : '#fff',
                },
            ]}
        >
            <List todos={TODOS} />
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
    },
    title: {
        fontSize: 24,
        fontWeight: '700',
        color: 'blue',
        marginBottom: 8,
    },
    subtitle: {
        fontSize: 16,
        textAlign: 'center',
    },
    code: {
        fontWeight: 'bold',
        color: '#61dafb',
    },
});

export default App;
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
												Section List
It is component for rendering lists with grouped sections like contact list with alphabet headers. It is similar to FlatList but supports sections  
with headers and footers.

Key Props of SectionList
.............................................

sections → array of objects with {title, data}.
renderItem → function to render each item.
renderSectionHeader → function to render the section header.
keyExtractor → unique key for each item.
ItemSeparatorComponent → separator between items.
SectionSeparatorComponent → separator between sections.
ListHeaderComponent / ListFooterComponent → optional header/footer for the whole list.
StickySectionHeadersEnabled ->when this enabled , the section header will "stick" to the top of the screen while you scroll, until the next section pushes it away.

A
 X
 y
 Z
B
 X
 y
 Z
C
 x
 Y

App.jsx
import React from 'react';
import { StatusBar, StyleSheet, SectionList, useColorScheme, View, Text } from 'react-native';
import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';

const DATA = [
    {
        title: "A",
        data: ["Apple", "Avocado"]
    },
    {
        title: "B",
        data: ["Banana", "Blueberry", "Blackberry", "Banana", "Blueberry", "Blackberry", "Banana", "Blueberry", "Blackberry", "Banana", "Blueberry", "Blackberry", "Banana", "Blueberry", "Blackberry", "Banana", "Blueberry", "Blackberry", "Banana", "Blueberry", "Blackberry", "Banana", "Blueberry", "Blackberry", "Banana", "Blueberry", "Blackberry"]
    },
    {
        title: "C",
        data: ["Cherry", "Coconut"]
    }
];

function MySectionList() {

    return <SectionList
        sections={DATA}
        keyExtractor={(item, index) => item + index}
        stickySectionHeadersEnabled={true}  
        renderItem={({ item }) => (
            <Text style={styles.item}>{item}</Text>
        )}
        renderSectionHeader={({ section: { title } }) => (
            <Text style={styles.header}>{title}</Text>
        )}

        ItemSeparatorComponent={() => <View style={styles.separator} />}
        SectionSeparatorComponent={() => <View style={styles.sectionSeparator} />}
        ListHeaderComponent={() => <Text style={styles.listHeader}>Fruits List</Text>}
        ListFooterComponent={() => <Text style={styles.listFooter}>End of List</Text>}
    />
}
function App() {
    const isDarkMode = useColorScheme() === 'dark';
    console.log('mode', isDarkMode)
    return (
        <SafeAreaProvider>
            <StatusBar barStyle={isDarkMode ? 'light-content' : 'dark-content'} />
            <AppContent isDarkMode={isDarkMode} />
        </SafeAreaProvider>
    );
}

function AppContent({ isDarkMode }) {
    const insets = useSafeAreaInsets();
    return (
        <View
            style={[
                styles.container,
                {
                    paddingTop: insets.top,
                    paddingBottom: insets.bottom,
                    paddingLeft: insets.left,
                    paddingRight: insets.right,
                    backgroundColor: isDarkMode ? '#121212' : '#fff',
                },
            ]}

        >
        <MySectionList/>
        </View>
    );
}

export default App;

const styles = StyleSheet.create({
    container: {
        flex: 1,
    },
    header: {
        fontSize: 22,
        fontWeight: 'bold',
        backgroundColor: '#f0f0f0',
        padding: 5,
    },
    item: {
        fontSize: 18,
        padding: 10,
    },
    separator: {
        height: 1,
        backgroundColor: '#ddd',
        marginLeft: 10,
    },
    sectionSeparator: {
        height: 5,
        backgroundColor: '#ccc',
    },
    listHeader: {
        fontSize: 24,
        fontWeight: 'bold',
        textAlign: 'center',
        marginVertical: 10,
    },
    listFooter: {
        fontSize: 18,
        textAlign: 'center',
        marginVertical: 10,
        color: 'gray',
    },
});
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									Redux Integration with React Native


import { StatusBar, StyleSheet, useColorScheme, View, Text,Button } from 'react-native';
import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';
import { configureStore, createSlice } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'

const initialState = {
    like: 0,
}
export const ReviewSlice = createSlice({
    initialState,
    name: 'review',
    reducers: {
        increment(state, action) {
            state.like++
        }
    }
})

//extract reducer from the slice
const ReviewReducer = ReviewSlice.reducer
//extract actions from the slice
const { increment } = ReviewSlice.actions

const appStore = configureStore({
    reducer: {
        reviewReducer: ReviewReducer
    }
})
const Review = () => {
    const review = useSelector(appState => {
        return appState.reviewReducer
    })
    const dispatch = useDispatch()

    const onLike = () => {
        dispatch(increment())
    }

    return <>
        <Text style={styles.label}>Like {review.like}</Text>
        <Button title="Like" onPress={onLike} />
    </>
}

function App() {
    const isDarkMode = useColorScheme() === 'dark';
    return (
        <Provider store={appStore}>
            <SafeAreaProvider>
                <StatusBar barStyle={isDarkMode ? 'light-content' : 'dark-content'} />
                <AppContent isDarkMode={isDarkMode} />
            </SafeAreaProvider>
        </Provider>
    );
}

function AppContent({ isDarkMode }) {
    const insets = useSafeAreaInsets();
    return (
        <View
            style={[
                styles.container,
                {
                    paddingTop: insets.top,
                    paddingBottom: insets.bottom,
                    paddingLeft: insets.left,
                    paddingRight: insets.right,
                    backgroundColor: isDarkMode ? '#121212' : '#fff',
                },
            ]}
        >
            <Review />
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent:'center',
        alignItems:'center'
    },
    title: {
        fontSize: 24,
        fontWeight: '700',
        marginBottom: 8,
    },
    subtitle: {
        fontSize: 16,
        textAlign: 'center',
    },
    code: {
        fontWeight: 'bold',
        color: '#61dafb',
    },
});

export default App;
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
								API Calls Redux,React Native

import { StatusBar, StyleSheet, useColorScheme, View, Text, FlatList, ActivityIndicator, Alert, TouchableHighlight } from 'react-native';
import { createSlice, createAsyncThunk, configureStore } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'
import { useEffect } from "react";
import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';

const initialState = {
    entities: [],
    loading: false,
}

const getPosts = createAsyncThunk('posts/getPosts', async (thunkAPI) => {
    const res = await fetch('https://jsonplaceholder.typicode.com/posts')
    const posts = await res.json()
    return posts
})
const postSlice = createSlice({
    name: 'posts',
    initialState,
    reducers: {},
    extraReducers(builder) {
        builder.addCase(getPosts.pending, (state, action) => {
            state.loading = true
        }).addCase(getPosts.fulfilled, (state, { payload }) => {
            state.loading = false
            state.entities = payload
        }).addCase(getPosts.rejected, (state, action) => {
            state.loading = false
        })
    }

})

const postReducer = postSlice.reducer

const appStore = configureStore({
    reducer: {
        posts: postReducer
    }
})

function Post() {
    const dispatch = useDispatch()
    const { entities, loading } = useSelector((state) => state.posts)

    useEffect(() => {
        //Todo: Remove settimeout after testing of loader
        dispatch(getPosts())
    }, [])

    const onSelectItem = (item) => {
        //show the item
        console.log(item)
        Alert.alert(item.title)
    }

    if (loading) return <ActivityIndicator size="large" color="#00ff00" />


    return <FlatList data={entities} keyExtractor={item => item.id} renderItem={(obj) => {
        return <Text style={styles.label} onPress={() => {
            onSelectItem(obj.item)
        }}>
            {obj.item.title}
        </Text>
    }} />

}
function App() {
    const isDarkMode = useColorScheme() === 'dark';
    return (
        // Redux Provider must be top level
        <Provider store={appStore}>
            <SafeAreaProvider>
                <StatusBar barStyle={isDarkMode ? 'light-content' : 'dark-content'} />
                <AppContent isDarkMode={isDarkMode} />
            </SafeAreaProvider>
        </Provider>
    );
}

function AppContent({ isDarkMode }) {
    const insets = useSafeAreaInsets();
    return (
        <View
            style={[
                styles.container,
                {
                    paddingTop: insets.top,
                    paddingBottom: insets.bottom,
                    paddingLeft: insets.left,
                    paddingRight: insets.right,
                    backgroundColor: isDarkMode ? '#121212' : '#fff',
                },
            ]}
        >
            <Post />
        </View>
    );
}
const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        padding: 10,
        alignItems: 'center'
    },
    label: {
        fontSize: 20,
        fontWeight: 'bold',
        color: 'blue'
    }
})

export default App;
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										Image Background

import React from 'react';
import { StatusBar, StyleSheet, useColorScheme, View, ImageBackground, Text } from 'react-native';
import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';


const image = { uri: 'https://legacy.reactjs.org/logo-og.png' };

function MyImageBackGround() {
    return <ImageBackground source={image} resizeMode="cover" style={styles.image}>
        <Text style={styles.text}>Inside</Text>
    </ImageBackground>

}

function App() {
    const isDarkMode = useColorScheme() === 'dark';

    return (
        <SafeAreaProvider>
            <StatusBar barStyle={isDarkMode ? 'light-content' : 'dark-content'} />
            <AppContent isDarkMode={isDarkMode} />
        </SafeAreaProvider>
    );
}

function AppContent({ isDarkMode }) {
    const insets = useSafeAreaInsets();
    return (
        <View
            style={[
                styles.container,
                {
                    paddingTop: insets.top,
                    paddingBottom: insets.bottom,
                    paddingLeft: insets.left,
                    paddingRight: insets.right,
                    backgroundColor: isDarkMode ? '#121212' : '#fff',
                },
            ]}
        >
        <MyImageBackGround/>
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    image: {
        flex: 1,
        justifyContent: 'center',
    },
    text: {
        color: 'white',
        fontSize: 42,
        lineHeight: 84,
        fontWeight: 'bold',
        textAlign: 'center',
        backgroundColor: '#000000c0',
    },
});

export default App;
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										Images
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
import { StatusBar, StyleSheet, useColorScheme, View, Text, FlatList, Image } from 'react-native';
import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';
import { useState, useEffect } from 'react'

function ProductList() {
    const [data, setData] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        async function init() {
            try {
                const response = await fetch("https://fakestoreapi.com/products");
                if (!response.ok) throw new Error("Network response was not ok");
                const result = await response.json();
                setData(result);
            } catch (err) {
                setError("Failed to fetch data");
            } finally {
                setLoading(false);
            }
        }
        init()
    }, [])

    return <FlatList
        data={data}
        keyExtractor={(item) => item.id}
        numColumns={2}
        contentContainerStyle={styles.container}
        renderItem={({ item }) => {
            return <View>
                <Image style={{borderRadius:8}} source={{ uri: item.image }} alt={item.title} resizeMode="contain" height={240}
                    width={250}
                />
            </View>
        }}
    />


}

function App() {
    const isDarkMode = useColorScheme() === 'dark';

    return (
        <SafeAreaProvider>
            <StatusBar barStyle={isDarkMode ? 'light-content' : 'dark-content'} />
            <AppContent isDarkMode={isDarkMode} />
        </SafeAreaProvider>
    );
}

function AppContent({ isDarkMode }) {
    const insets = useSafeAreaInsets();
    return (
        <View
            style={[
                styles.container,
                {
                    paddingTop: insets.top,
                    paddingBottom: insets.bottom,
                    paddingLeft: insets.left,
                    paddingRight: insets.right,
                    backgroundColor: isDarkMode ? '#121212' : '#fff',
                },
            ]}
        >
            <ProductList />
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1
    },
    image: {
        flex: 1,
        borderRadius:8,
        justifyContent: 'center',
    },
    text: {
        color: 'white',
        fontSize: 42,
        lineHeight: 84,
        fontWeight: 'bold',
        textAlign: 'center',
        backgroundColor: '#000000c0',
    },
});

export default App;
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
								How to get Input from the User


import React, { useState } from 'react';
import {
  StatusBar,
  StyleSheet,
  useColorScheme,
  View,
  Text,
  TextInput,
  TouchableOpacity,
  Alert,
} from 'react-native';
import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';

function App() {
  const isDarkMode = useColorScheme() === 'dark';

  return (
    <SafeAreaProvider>
      <StatusBar barStyle={isDarkMode ? 'light-content' : 'dark-content'} />
      <AppContent isDarkMode={isDarkMode} />
    </SafeAreaProvider>
  );
}

function AppContent({ isDarkMode }) {
  const insets = useSafeAreaInsets();

  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleRegister = () => {
    if (!name || !email || !password) {
      Alert.alert('Error', 'Please fill all fields');
      return;
    }
    Alert.alert('Success', `Welcome, ${name}! Your account is created.`);
  };

  return (
    <View
      style={[
        styles.container,
        {
          paddingTop: insets.top,
          paddingBottom: insets.bottom,
          paddingLeft: insets.left,
          paddingRight: insets.right,
          backgroundColor: isDarkMode ? '#121212' : '#fff',
        },
      ]}
    >
      <Text style={[styles.title, { color: isDarkMode ? '#fff' : '#000' }]}>
        🚀 Registration Form
      </Text>

      {/* Full Name */}
      <TextInput
        style={[
          styles.input,
          { backgroundColor: isDarkMode ? '#1e1e1e' : '#f9f9f9', color: isDarkMode ? '#fff' : '#000' },
        ]}
        placeholder="Full Name"
        placeholderTextColor={isDarkMode ? '#aaa' : '#555'}
        value={name}
        onChangeText={setName}
      />

      {/* Email */}
      <TextInput
        style={[
          styles.input,
          { backgroundColor: isDarkMode ? '#1e1e1e' : '#f9f9f9', color: isDarkMode ? '#fff' : '#000' },
        ]}
        placeholder="Email Address"
        placeholderTextColor={isDarkMode ? '#aaa' : '#555'}
        keyboardType="email-address"
        value={email}
        onChangeText={setEmail}
      />

      {/* Password */}
      <TextInput
        style={[
          styles.input,
          { backgroundColor: isDarkMode ? '#1e1e1e' : '#f9f9f9', color: isDarkMode ? '#fff' : '#000' },
        ]}
        placeholder="Password"
        placeholderTextColor={isDarkMode ? '#aaa' : '#555'}
        secureTextEntry
        value={password}
        onChangeText={setPassword}
      />

      {/* Register Button */}
      <TouchableOpacity
        style={[styles.button, { backgroundColor: isDarkMode ? '#61dafb' : '#007bff' }]}
        onPress={handleRegister}
      >
        <Text style={styles.buttonText}>Register</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: '700',
    marginBottom: 30,
    textAlign: 'center',
  },
  input: {
    width: '100%',
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 8,
    padding: 12,
    marginBottom: 15,
  },
  button: {
    width: '100%',
    padding: 15,
    borderRadius: 8,
  },
  buttonText: {
    color: '#fff',
    fontSize: 18,
    textAlign: 'center',
    fontWeight: 'bold',
  },
});

export default App;
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									  React Native Navigation
.....................................................................................................................................................................................................................................................
			
How navigation works?

In a web browser, you can link to different pages using an anchor (<a>) tag. When the user clicks on a link, the URL is pushed to the browser history stack.

 When the user presses the back button, the browser pops the item from the top of the history stack, so the active page is now the previously visited page.

React Native doesn't have a built-in idea of a global history stack like a web browser does -- this is where React Navigation enters the story.

React Native Navigation's stack navigator provides a way for your app to transition between screens and manage navigation history.

If your app uses only one stack navigator then it is conceptually similar to how a web browser handles navigation state - your app pushes and pops items from the navigation stack as users interact with it, and this results in the user seeing different screens. 

A key difference between how this works in a web browser and in React Navigation is that React Navigation's stack navigator provides the gestures and animations that you would expect on Android and iOS when navigating between routes in the stack.

Types of Navigations:
1.Stack Navigation
2.Tab Navigation
3.Drawer Navigation

Core concepts in React Native Navigation:
...............................................................................

Two types of Component

1.Screen
   =>It is a special component,which only display Userinterface, not having any logic      It acts container.
2.Component
   => It is component having biz logic and ui logic...


Getting Started:

For Bare React Native project:

1.Stack Navigation : screen to screen

npm install @react-navigation/native   @react-navigation/native-stack
npm install react-native-screens react-native-safe-area-context

...................................................................................
Multi screen-Page
.................................................................................

Types of navigation:
1.screen to screen - stack navigation -  @react-navigation/stack
2.Tab - tab based navivation.  @react-navigation/bottom-tabs

Types of navigation:
1.screen to screen - stack navigation -  @react-navigation/stack
2.Tab - tab based navivation.  @react-navigation/bottom-tabs

Stack Navigation:

Moving among screens: How to move from one screen to another screen?

StackNavigator :
 
 Object used to navigate between screen.

 Stack Object used to  represent stack navigator.

import { createNativeStackNavigator } from "@react-navigation/native-stack";//create 
Stack Object
const Stack  = createNativeStackNavigator();
console.log(Stack)

Object {
  "Navigator": [Function StackNavigator],
  "Screen": [Function Screen],
}
1.createStackNavigator is a function that returns an object containing 2 properties: Screen and Navigator.
2.Both of them are React components used for configuring the navigator.
The Navigator should contain Screen elements as its children to define the configuration for routes.

3.NavigationContainer is a component which manages our navigation tree and contains the navigation state. This component must wrap all navigators structure. Usually, we'd render this component at the root of our app, which is usually the component exported from App.js.

First Screen
App.jsx
import { StatusBar, StyleSheet, useColorScheme, View, Text,Button } from 'react-native';
import {
  SafeAreaProvider,
  useSafeAreaInsets,
} from 'react-native-safe-area-context';
import { NavigationContainer } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack";

const Stack = createNativeStackNavigator();

//Screens 
const HomeScreen = (props) => <View style={{flex:1,justifyContent:'center',alignItems:'center'}}>
    <Text style={{
        fontSize: 40,
    }}>Home Screen</Text>
   
</View>

function App() {
  const isDarkMode = useColorScheme() === 'dark';

  return (
    <SafeAreaProvider>
      <AppContent />
    </SafeAreaProvider>
  );
}

function AppContent() {
  const insets = useSafeAreaInsets();
  return (
    <View
      style={[
        styles.container,
        {
          paddingTop: insets.top,
          paddingBottom: insets.bottom,
          paddingLeft: insets.left,
          paddingRight: insets.right,
        },
      ]}
    >
      <NavigationContainer>
        <Stack.Navigator>
            {/* Screens */}
          <Stack.Screen name="Home" component={HomeScreen} />
        </Stack.Navigator>
      </NavigationContainer>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'lightblue',
   },
});

export default App;
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									Moving between screens
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

..................................................................................
			   How to move between screens
..................................................................................

Navigating to a new screen​

Every Component receives information from the parent component as a prop.
When component is rendered via route,React Navigator injects an object called "Navigation" Object as prop to every Component


Props;
Object {
  "navigation": Object {
    "addListener": [Function addListener],
    "canGoBack": [Function canGoBack],
    "dispatch": [Function dispatch],
    "getId": [Function getId],
    "getParent": [Function getParent],
    "getState": [Function anonymous],
    "goBack": [Function anonymous],
    "isFocused": [Function isFocused],
    "navigate": [Function anonymous],
    "pop": [Function anonymous],
    "popToTop": [Function anonymous],
    "push": [Function anonymous],
    "removeListener": [Function removeListener],
    "replace": [Function anonymous],
    "reset": [Function anonymous],
    "setOptions": [Function setOptions],
    "setParams": [Function anonymous],
  },
  "route": Object {
    "key": "Home-V-z_dGCJfqcHgNXxzxRGK",
    "name": "Home",
    "params": undefined,
  },
import { StatusBar, StyleSheet, useColorScheme, View, Text, Button, TouchableHighlight, Alert } from 'react-native';
import {
    SafeAreaProvider,
    useSafeAreaInsets,
} from 'react-native-safe-area-context';
import { NavigationContainer } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack";

const Stack = createNativeStackNavigator();

//Screens 
const HomeScreen = (props) => <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
    <TouchableHighlight onPress={() => {
        props.navigation.navigate("Profile")
    }} activeOpacity={0.4} underlayColor={'lightgreen'}>
        <Text style={{
            fontSize: 40,
        }}>View Profile</Text>
    </TouchableHighlight>



</View>
const ProfileScreen = (props) => <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
    <Text style={{
        fontSize: 40,
    }}>Profile Screen</Text>
</View>

function App() {
    const isDarkMode = useColorScheme() === 'dark';

    return (
        <SafeAreaProvider>
            <AppContent />
        </SafeAreaProvider>
    );
}

function AppContent() {
    const insets = useSafeAreaInsets();
    return (
        <View
            style={[
                styles.container,
                {
                    paddingTop: insets.top,
                    paddingBottom: insets.bottom,
                    paddingLeft: insets.left,
                    paddingRight: insets.right,
                },
            ]}
        >
            <NavigationContainer>
                <Stack.Navigator>
                    {/* Screens */}
                    <Stack.Screen name="Home" component={HomeScreen} />
                    <Stack.Screen name="Profile" component={ProfileScreen} />
                </Stack.Navigator>
            </NavigationContainer>
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'black',
    },
});

export default App;
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
								Transfering Data between screens

import { StatusBar, StyleSheet, useColorScheme, View, Text, Button, TouchableHighlight, Alert } from 'react-native';
import {
    SafeAreaProvider,
    useSafeAreaInsets,
} from 'react-native-safe-area-context';
import { NavigationContainer } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack";

const Stack = createNativeStackNavigator();

//Screens 
const HomeScreen = (props) => <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
    <TouchableHighlight onPress={() => {
        props.navigation.navigate("Profile", { name: 'Subramanian Murugan' })
    }} activeOpacity={0.4} underlayColor={'lightgreen'}>
        <Text style={{
            fontSize: 40,
        }}>View Profile</Text>
    </TouchableHighlight>



</View>
const ProfileScreen = (props) => <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
    <Text style={{
        fontSize: 20,
    }}>Welcome to {props.route.params.name}</Text>
</View>

function App() {
    const isDarkMode = useColorScheme() === 'dark';

    return (
        <SafeAreaProvider>
            <AppContent />
        </SafeAreaProvider>
    );
}

function AppContent() {
    const insets = useSafeAreaInsets();
    return (
        <View
            style={[
                styles.container,
                {
                    paddingTop: insets.top,
                    paddingBottom: insets.bottom,
                    paddingLeft: insets.left,
                    paddingRight: insets.right,
                },
            ]}
        >
            <NavigationContainer>
                <Stack.Navigator>
                    {/* Screens */}
                    <Stack.Screen name="Home" component={HomeScreen} />
                    <Stack.Screen name="Profile" component={ProfileScreen} />
                </Stack.Navigator>
            </NavigationContainer>
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'black',
    },
});

export default App;
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

